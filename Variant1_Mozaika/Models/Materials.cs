//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Variant1_Mozaika.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Materials
    {
        public Materials()
        {
            this.MaterialSuppliers = new HashSet<MaterialSuppliers>();
        }
    
        public int MaterialID { get; set; }
        public string MaterialName { get; set; }
        public int MaterialTypeID { get; set; }
        public decimal UnitPrice { get; set; }
        public decimal StockQuantity { get; set; }
        public decimal MinimumQuantity { get; set; }
        public decimal PackageQuantity { get; set; }
        public int UnitID { get; set; }
    
        public virtual MaterialTypes MaterialTypes { get; set; }
        public virtual ICollection<MaterialSuppliers> MaterialSuppliers { get; set; }
        public virtual Units Units { get; set; }

        // Реализация IDataErrorInfo для валидации
        public string Error => null;
        public class MaterialViewModel
        {
            public int MaterialID { get; set; }
            public string MaterialName { get; set; }
            public string MaterialTypeName { get; set; }
            public decimal UnitPrice { get; set; }
            public decimal StockQuantity { get; set; }
            public decimal MinimumQuantity { get; set; }
            public decimal PackageQuantity { get; set; }
            public string UnitName { get; set; }
            public decimal BatchCost { get; set; }
        }
        public string this[string columnName]
        {
            get
            {
                switch (columnName)
                {
                    case nameof(MaterialName):
                        if (string.IsNullOrWhiteSpace(MaterialName))
                            return "Наименование материала не может быть пустым.";
                        break;
                    case nameof(MaterialTypeID):
                        if (MaterialTypeID <= 0)
                            return "Выберите тип материала.";
                        break;
                    case nameof(UnitID):
                        if (UnitID <= 0)
                            return "Выберите единицу измерения.";
                        break;
                    case nameof(StockQuantity):
                        if (StockQuantity < 0)
                            return "Количество на складе должно быть неотрицательным.";
                        break;
                    case nameof(PackageQuantity):
                        if (PackageQuantity <= 0)
                            return "Количество в упаковке должно быть положительным.";
                        break;
                    case nameof(MinimumQuantity):
                        if (MinimumQuantity < 0)
                            return "Минимальное количество должно быть неотрицательным.";
                        break;
                    case nameof(UnitPrice):
                        if (UnitPrice < 0)
                            return "Цена единицы материала должна быть неотрицательной.";
                        break;
                }
                return null;
            }
        }

    }
}
